// Generated by gencpp from file kbd_ros_msgs/kbd.msg
// DO NOT EDIT!


#ifndef KBD_ROS_MSGS_MESSAGE_KBD_H
#define KBD_ROS_MSGS_MESSAGE_KBD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kbd_ros_msgs
{
template <class ContainerAllocator>
struct kbd_
{
  typedef kbd_<ContainerAllocator> Type;

  kbd_()
    : w(0)
    , a(0)
    , s(0)
    , d(0)  {
    }
  kbd_(const ContainerAllocator& _alloc)
    : w(0)
    , a(0)
    , s(0)
    , d(0)  {
  (void)_alloc;
    }



   typedef int16_t _w_type;
  _w_type w;

   typedef int16_t _a_type;
  _a_type a;

   typedef int16_t _s_type;
  _s_type s;

   typedef int16_t _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::kbd_ros_msgs::kbd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kbd_ros_msgs::kbd_<ContainerAllocator> const> ConstPtr;

}; // struct kbd_

typedef ::kbd_ros_msgs::kbd_<std::allocator<void> > kbd;

typedef boost::shared_ptr< ::kbd_ros_msgs::kbd > kbdPtr;
typedef boost::shared_ptr< ::kbd_ros_msgs::kbd const> kbdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kbd_ros_msgs::kbd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kbd_ros_msgs::kbd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kbd_ros_msgs::kbd_<ContainerAllocator1> & lhs, const ::kbd_ros_msgs::kbd_<ContainerAllocator2> & rhs)
{
  return lhs.w == rhs.w &&
    lhs.a == rhs.a &&
    lhs.s == rhs.s &&
    lhs.d == rhs.d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kbd_ros_msgs::kbd_<ContainerAllocator1> & lhs, const ::kbd_ros_msgs::kbd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kbd_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kbd_ros_msgs::kbd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kbd_ros_msgs::kbd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kbd_ros_msgs::kbd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a1716104afcb5f80164140a20101628";
  }

  static const char* value(const ::kbd_ros_msgs::kbd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a1716104afcb5f8ULL;
  static const uint64_t static_value2 = 0x0164140a20101628ULL;
};

template<class ContainerAllocator>
struct DataType< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kbd_ros_msgs/kbd";
  }

  static const char* value(const ::kbd_ros_msgs::kbd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 w\n"
"int16 a\n"
"int16 s\n"
"int16 d\n"
;
  }

  static const char* value(const ::kbd_ros_msgs::kbd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w);
      stream.next(m.a);
      stream.next(m.s);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kbd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kbd_ros_msgs::kbd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kbd_ros_msgs::kbd_<ContainerAllocator>& v)
  {
    s << indent << "w: ";
    Printer<int16_t>::stream(s, indent + "  ", v.w);
    s << indent << "a: ";
    Printer<int16_t>::stream(s, indent + "  ", v.a);
    s << indent << "s: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s);
    s << indent << "d: ";
    Printer<int16_t>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KBD_ROS_MSGS_MESSAGE_KBD_H
